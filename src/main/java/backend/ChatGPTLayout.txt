/backend
 â”œâ”€â”€ /server
 â”‚   â”œâ”€â”€ ğŸ“„ ChessServer.java       # WebSocket server handling connections
 â”‚   â”œâ”€â”€ ğŸ“„ SessionManager.java    # Manages player sessions and connections
 â”‚   â”œâ”€â”€ ğŸ“„ ClientHandler.java     # Processes individual client messages
 â”‚   â””â”€â”€ ğŸ“„ ServerMain.java        # Main class to start the WebSocket server
 â”œâ”€â”€ /game
 â”‚   â”œâ”€â”€ ğŸ“„ GameManager.java       # Manages active chess games
 â”‚   â”œâ”€â”€ ğŸ“„ MoveProcessor.java     # Validates and processes moves
 â”‚   â”œâ”€â”€ ğŸ“„ TimeControl.java       # Handles game timers (if needed)
 â”‚   â”œâ”€â”€ ğŸ“„ Player.java            # Represents a player in the game
 â”‚   â”œâ”€â”€ ğŸ“„ Matchmaker.java        # Handles pairing players for games
 â”‚   â””â”€â”€ ğŸ“„ GameState.java         # Stores game state, used for FEN and move validation
 â”œâ”€â”€ /utils
 â”‚   â”œâ”€â”€ ğŸ“„ JSONUtils.java         # Handles JSON parsing for WebSocket messages
 â”‚   â”œâ”€â”€ ğŸ“„ ConfigLoader.java      # Loads server configurations (e.g., port settings)
 â”‚   â”œâ”€â”€ ğŸ“„ Logger.java            # Logging utilities for debugging
 â”‚   â””â”€â”€ ğŸ“„ MessageParser.java     # Parses incoming messages for commands
 â””â”€â”€ config
     â”œâ”€â”€ ğŸ“„ server.properties      # Config file (port, max connections, etc.)